{"version":3,"sources":["components/Chart/RadialBar.js","components/Sensors/Sensor/Sensor.js","components/Sensors/Sensors.js","components/Navbar/navbar.js","App.js","serviceWorker.js","index.js"],"names":["RadialBar","props","state","series","options","chart","height","type","toolbar","show","plotOptions","radialBar","startAngle","endAngle","hollow","margin","size","background","image","undefined","imageOffsetX","imageOffsetY","position","dropShadow","enabled","top","left","blur","opacity","track","strokeWidth","dataLabels","name","offsetY","color","fontSize","value","formatter","val","parseInt","fill","gradient","shade","shadeIntensity","gradientToColors","inverseColors","opacityFrom","opacityTo","stops","stroke","lineCap","labels","id","this","Component","Sensor","getClass","smokeLevel","co2Level","getFloor","floor","word","NumberToWord","toOrdinal","slice","className","room","activated","Sensors","sensors","map","sensor","key","_id","lastReading","Navbar","style","backgroundColor","href","src","alt","App","refresh","setInterval","Axios","get","then","res","data","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57f62816.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\nclass RadialBar extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tseries: [0],\r\n\t\t\toptions: {\r\n\t\t\t\tchart: {\r\n\t\t\t\t\theight: 350,\r\n\t\t\t\t\ttype: 'radialBar',\r\n\t\t\t\t\ttoolbar: {\r\n\t\t\t\t\t\tshow: false,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tplotOptions: {\r\n\t\t\t\t\tradialBar: {\r\n\t\t\t\t\t\tstartAngle: -180,\r\n\t\t\t\t\t\tendAngle: 180,\r\n\t\t\t\t\t\thollow: {\r\n\t\t\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\t\t\tsize: '70%',\r\n\t\t\t\t\t\t\tbackground: '#fff',\r\n\t\t\t\t\t\t\timage: undefined,\r\n\t\t\t\t\t\t\timageOffsetX: 0,\r\n\t\t\t\t\t\t\timageOffsetY: 0,\r\n\t\t\t\t\t\t\tposition: 'front',\r\n\t\t\t\t\t\t\tdropShadow: {\r\n\t\t\t\t\t\t\t\tenabled: true,\r\n\t\t\t\t\t\t\t\ttop: 3,\r\n\t\t\t\t\t\t\t\tleft: 0,\r\n\t\t\t\t\t\t\t\tblur: 4,\r\n\t\t\t\t\t\t\t\topacity: 0.24,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\ttrack: {\r\n\t\t\t\t\t\t\tbackground: '#fff',\r\n\t\t\t\t\t\t\tstrokeWidth: '67%',\r\n\t\t\t\t\t\t\tmargin: 0, // margin is in pixels\r\n\t\t\t\t\t\t\tdropShadow: {\r\n\t\t\t\t\t\t\t\tenabled: true,\r\n\t\t\t\t\t\t\t\ttop: -3,\r\n\t\t\t\t\t\t\t\tleft: 0,\r\n\t\t\t\t\t\t\t\tblur: 4,\r\n\t\t\t\t\t\t\t\topacity: 0.35,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\tdataLabels: {\r\n\t\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\t\tname: {\r\n\t\t\t\t\t\t\t\toffsetY: -10,\r\n\t\t\t\t\t\t\t\tshow: false,\r\n\t\t\t\t\t\t\t\tcolor: '#888',\r\n\t\t\t\t\t\t\t\tfontSize: '17px',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: {\r\n\t\t\t\t\t\t\t\tformatter: function (val) {\r\n\t\t\t\t\t\t\t\t\treturn parseInt(val) / 10;\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tcolor: '#111',\r\n\t\t\t\t\t\t\t\tfontSize: '36px',\r\n\t\t\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tfill: {\r\n\t\t\t\t\ttype: 'gradient',\r\n\t\t\t\t\tgradient: {\r\n\t\t\t\t\t\tshade: 'dark',\r\n\t\t\t\t\t\ttype: 'horizontal',\r\n\t\t\t\t\t\tshadeIntensity: 0.5,\r\n\t\t\t\t\t\tgradientToColors: ['#ABE5A1'],\r\n\t\t\t\t\t\tinverseColors: true,\r\n\t\t\t\t\t\topacityFrom: 1,\r\n\t\t\t\t\t\topacityTo: 1,\r\n\t\t\t\t\t\tstops: [0, 100],\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\tstroke: {\r\n\t\t\t\t\tlineCap: 'round',\r\n\t\t\t\t},\r\n\t\t\t\tlabels: [''],\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id='card'>\r\n\t\t\t\t<div id='chart'>\r\n\t\t\t\t\t<ReactApexChart\r\n\t\t\t\t\t\toptions={this.state.options}\r\n\t\t\t\t\t\tseries={[this.props.series * 10]}\r\n\t\t\t\t\t\ttype='radialBar'\r\n\t\t\t\t\t\theight={160}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default RadialBar;\r\n","import React, { Component } from 'react';\r\nimport NumberToWord from 'number-to-words';\r\nimport RadialBarChart from '../../Chart/RadialBar';\r\nimport '../Sensor/sensor.css';\r\n\r\nclass Sensor extends Component {\r\n\t\r\n\tgetClass = () => {\r\n\t\tif(this.props.smokeLevel > 5 || this.props.co2Level > 5) {\r\n\t\t\treturn 'sensor-container-left-warning'\r\n\t\t} else {\r\n\t\t\treturn 'sensor-container-left-safe'\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='sensor-container-main shadow'>\r\n\t\t\t\t<div className={this.getClass()}>\r\n\t\t\t\t\t{this.getFloor(this.props.floor)}\r\n\t\t\t\t\t<p className='location-normal'>FLOOR</p>\r\n\t\t\t\t\t<p className='location-highlight'>{this.props.room}</p>\r\n\t\t\t\t\t<p className='location-normal'>ROOM</p>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className='sensor-container-right'>\r\n\t\t\t\t\t<div className='active-status-container'>\r\n\t\t\t\t\t\t{this.props.activated ? (\r\n\t\t\t\t\t\t\t<p className='active-status-true'>Activated</p>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<p className='active-status-false'>Disabled</p>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='chart-container'>\r\n\t\t\t\t\t\t<div className='chart-container-left'>\r\n\t\t\t\t\t\t\t<div className='chart'>\r\n\t\t\t\t\t\t\t\t<RadialBarChart series={this.props.smokeLevel} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className='name'>\r\n\t\t\t\t\t\t\t\t<p>SMOKE</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='chart-container-right'>\r\n\t\t\t\t\t\t\t<div className='chart'>\r\n\t\t\t\t\t\t\t\t<RadialBarChart series={this.props.co2Level} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className='name'>\r\n\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\tCO<sub>2</sub>\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tgetFloor = (floor) => {\r\n\t\tconst ordinal = NumberToWord.toOrdinal(parseInt(floor));\r\n\t\tconst word = ordinal.slice(-2);\r\n\t\treturn (\r\n\t\t\t<p className='location-highlight'>\r\n\t\t\t\t{floor}\r\n\t\t\t\t<sup>{word}</sup>\r\n\t\t\t</p>\r\n\t\t);\r\n\t};\r\n}\r\n\r\nexport default Sensor;\r\n","import React, { Component } from 'react';\r\nimport Sensor from './Sensor/Sensor';\r\n\r\nclass Sensors extends Component {\r\n\trender() {\r\n\t\tconst sensors = this.props.sensors;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{sensors.map((sensor) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Sensor\r\n\t\t\t\t\t\t\tkey={sensor._id}\r\n\t\t\t\t\t\t\tid={sensor._id}\r\n\t\t\t\t\t\t\tfloor={sensor.floor}\r\n\t\t\t\t\t\t\troom={sensor.room}\r\n\t\t\t\t\t\t\tsmokeLevel={sensor.lastReading.smokeLevel}\r\n\t\t\t\t\t\t\tco2Level={sensor.lastReading.co2Level}\r\n\t\t\t\t\t\t\tactivated={sensor.activated}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Sensors;\r\n","import React, { Component } from 'react';\r\n\r\nclass Navbar extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<nav\r\n\t\t\t\tclassName='navbar navbar-light sticky-top'\r\n\t\t\t\tstyle={{ backgroundColor: '#ebebeb' }}\r\n\t\t\t>\r\n\t\t\t\t<a\r\n\t\t\t\t\tclassName='navbar-brand'\r\n\t\t\t\t\thref='https://ThamalDilanka.github.io/fire-alert-web'\r\n\t\t\t\t>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc='https://i.ibb.co/N7L2Gn3/fire-alert-logo-name.png'\r\n\t\t\t\t\t\talt='aq-visualizer-logo'\r\n\t\t\t\t\t\tclassName='d-inline-block align-top'\r\n\t\t\t\t\t\theight='50'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</a>\r\n\t\t\t</nav>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\nimport Axios from 'axios';\nimport Sensors from './components/Sensors/Sensors';\nimport Navbar from './components/Navbar/navbar';\n\nclass App extends Component {\n\tstate = {\n\t\tsensors: [],\n\t};\n\n\tcomponentDidMount() {\n\t\tAxios.get(\n\t\t\t'https://fire-alert-solution.herokuapp.com/api/v1/sensors'\n\t\t).then((res) => {\n\t\t\tconst sensors = res.data.data.sensors;\n\t\t\tthis.setState({ sensors: [...sensors] });\n\t\t});\n\n\t\tthis.refresh();\n\t}\n\n\trefresh = () => {\n\t\tsetInterval(() => {\n\t\t\tAxios.get(\n\t\t\t\t'https://fire-alert-solution.herokuapp.com/api/v1/sensors'\n\t\t\t).then((res) => {\n\t\t\t\tconst sensors = res.data.data.sensors;\n\t\t\t\tthis.setState({ sensors: [...sensors] });\n\t\t\t});\n\t\t}, 2000);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbar />\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<Sensors sensors={this.state.sensors} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}